"use strict";

function bzmDatePicker(a, b, c) {
    function d(a, c, d, f) {
        f.$formatters.unshift(function(b) {
            var c = h.formatDate(b, a.format);
            return b < a.startDate && f.$setValidity("DATE-TOO-EARLY", !1), b > a.endDate && f.$setValidity("DATE-TOO-LATE", !1), a.modelviewvalue = c, c
        }), f.$parsers.unshift(function(a) {
            return "Hoops"
        }), a.moveMonth = function(b, c) {
            if (!c) return b;
            var d, e, f = a.ngModel,
                g = f.getDate(),
                h = f.getMonth(),
                i = Math.abs(c);
            if (c = c > 0 ? 1 : -1, 1 == i) e = -1 === c ? function() {
                return f.getMonth() == h
            } : function() {
                return f.getMonth() != d
            }, d = h + c, f.setMonth(d), (0 > d || d > 11) && (d = (d + 12) % 12);
            else {
                for (var j = 0; i > j; j++) f = a.moveMonth(f, c);
                d = f.getMonth(), f.setDate(g), e = function() {
                    return d != f.getMonth()
                }
            }
            for (; e();) f.setDate(--g), f.setMonth(d);
            return f
        }, a.moveYear = function(b, c) {
            return a.moveMonth(b, 12 * c)
        }, a.showMode = function(b) {
            b && (a.viewMode = Math.max(0, Math.min(2, a.viewMode + b)), a.$apply(), a.updateNavArrows())
        }, a.closest = function(a, b) {
            for (var c = a; c[0];) {
                for (var d = 0; d < b.length; d++)
                    if (b[d] === c[0].tagName) return c;
                c = c.parent()
            }
        }, a.today = function() {
            var a = new Date,
                b = new Date(a.getFullYear(), a.getMonth(), a.getDate(), 0, 0, 0, 0);
            return b
        }, a.setDate = function(b) {
            b || (b = a.today()), a.$apply(function() {
                a.ngModel = b
            }), f.$setTouched(), a.autohide && a.hide(!0), a.callback && a.callback(b, a.pickerid)
        }, a.updateNavArrows = function() {
            var b = a.viewDate,
                c = b.getFullYear(),
                d = b.getMonth();
            switch (a.viewMode) {
                case 0:
                    c <= a.startDate.getFullYear() && d <= a.startDate.getMonth() ? a.find(".prev").css({
                        visibility: "hidden"
                    }) : a.find(".prev").css({
                        visibility: "visible"
                    }), c >= a.endDate.getFullYear() && d >= a.endDate.getMonth() ? a.find(".next").css({
                        visibility: "hidden"
                    }) : a.find(".next").css({
                        visibility: "visible"
                    });
                    break;
                case 1:
                case 2:
                    c <= a.startDate.getFullYear() ? a.find(".prev").css({
                        visibility: "hidden"
                    }) : a.find(".prev").css({
                        visibility: "visible"
                    }), c >= a.endDate.getFullYear() ? a.find(".next").css({
                        visibility: "hidden"
                    }) : a.find(".next").css({
                        visibility: "visible"
                    })
            }
        }, a.fillMonths = function() {
            for (var b = "", c = 0; 12 > c;) b += '<span class="picker month">' + e[a.language].monthsShort[c++] + "</span>";
            a.find(".datepicker-months td").html(b)
        }, a.fill = function() {
            var b = a.viewDate.getFullYear(),
                c = a.viewDate.getMonth(),
                f = a.viewDate.getDate(),
                g = a.startDate.getFullYear(),
                i = a.startDate.getMonth(),
                j = a.endDate.getFullYear(),
                k = a.endDate.getMonth(),
                l = a.today();
            a.find(".datepicker-days th.date-switch").text(e[a.language].months[c] + " " + b), a.updateNavArrows(), a.fillMonths();
            var m = new Date(b, c - 1, 28, 0, 0, 0, 0),
                n = h.getDaysInMonth(m.getFullYear(), m.getMonth());
            m.setDate(n), m.setDate(n - (m.getDay() - a.weekStart + 7) % 7);
            var o = new Date(m.valueOf());
            o.setDate(o.getDate() + 42), o = o.valueOf();
            for (var p, q, r = []; m.valueOf() < o;) {
            	console.log('r value',r);
                if (p = "picker", m.getDay() === a.weekStart && (r.push("<tr>"), a.calendarWeeks)) {
                    var s = new Date(m.getFullYear(), m.getMonth(), m.getDate() - m.getDay() + 10 - (a.weekStart && a.weekStart % 7 < 5 && 7)),
                        t = new Date(s.getFullYear(), 0, 4),
                        u = ~~((s - t) / 864e5 / 7 + 1.5);

                    r.push('<td class="cw">' + u + "</td>")
                }
                m.valueOf() < a.startDate.valueOf() || m.valueOf() > a.endDate.valueOf() || -1 !== a.dayoff.indexOf(m.getDay()) ? (p += " disabled", q = !0) : q = !1, m.getFullYear() < b || m.getFullYear() === b && m.getMonth() < c ? p += " old" : (m.getFullYear() > b || m.getFullYear() === b && m.getMonth() > c) && (p += " new"), m === l && (a.todayHighlight && (p += " today"), d.today && (q ? a.todayClass = "disabled" : a.todayClass = "enable")), b === m.getFullYear() && c === m.getMonth() && f === m.getDate() && (p += " active"), r.push('<td class="day ' + p + '">' + m.getDate() + "</td>"), m.getDay() === a.weekEnd && r.push("</tr>"), m.setDate(m.getDate() + 1)
            }
            a.find(".datepicker-days tbody").empty().append(r.join(""));
            var v = a.viewDate.getFullYear(),
                w = a.find(".datepicker-months");
            a.find("th.date-switch", w).text(b);
            var x = w.find("span", w);
            if (x.removeClass("active"), v && v === b && x.eq(a.viewDate.getMonth()).addClass("active"), (g > b || b > j) && x.addClass("disabled"), b === g)
                for (var y = 0; i > y; y++) x.eq(y).addClass("disabled");
            if (b === j)
                for (var y = k + 1; y < x.length; y++) x.eq(y).addClass("disabled");
            r = "", b = 10 * parseInt(b / 10, 10);
            var z = a.find(".datepicker-years");
            a.find("th.date-switch", z).text(b + "-" + (b + 9)), z = z.find("td"), b -= 1;
            for (var A = -1; 11 > A; A++) r += '<span class="picker year' + (-1 === A || 10 === A ? " old" : "") + (v === b ? " active" : "") + (g > b || b > j ? " disabled" : "") + '">' + b + "</span>", b += 1;
            z.html(r)
        }, a.place = function() {
            a.picker.css({
                top: c[0].offsetTop,
                left: c[0].offsetLeft,
                zIndex: 100,
                display: "block"
            })
        }, a.update = function() {
            a.viewDate = new Date(a.ngModel || new Date), this.viewDate < this.startDate ? this.viewDate = new Date(this.startDate.valueOf()) : this.viewDate > this.endDate && (this.viewDate = new Date(this.endDate.valueOf())), this.fill()
        }, a.dateValueWithinRange = function(b) {
            return b >= a.startDate && b <= a.endDate
        }, a.onclick = function(b) {
            var c = angular.element(b);
            if (c.hasClass("datepicker-close")) return void a.hide(!0);
            var d = a.closest(c, ["SPAN", "TD", "TH"]);
            switch (d[0].tagName) {
                case "TH":
                    if (d.hasClass("date-switch") && a.showMode(1), d.hasClass("prev") || d.hasClass("next")) {
                        var e = h.modes[a.viewMode].navStep * (d.hasClass("prev") ? -1 : 1);
                        switch (a.viewMode) {
                            case 0:
                                a.viewDate = a.moveMonth(a.viewDate, e);
                                break;
                            case 1:
                            case 2:
                                a.viewDate = a.moveYear(a.viewDate, e)
                        }
                        a.fill()
                    } else if (d.hasClass("today")) {
                        a.setDate(), a.autohide && a.hide(!0);
                        break
                    }
                    break;
                case "SPAN":
                    if (!d.hasClass("disabled")) {
                        if (d.hasClass("month")) {
                            for (var f = d.parent().find("span"), g = 0; g < f.length; g++)
                                if (d.text() === f.eq(g).text()) {
                                    a.viewDate.setMonth(g);
                                    break
                                }
                        } else {
                            var i = parseInt(d.text(), 10) || 0;
                            a.viewDate.setFullYear(i)
                        }
                        a.showMode(-1), a.fill()
                    }
                    break;
                case "TD":
                    if (d.hasClass("day") && !d.hasClass("disabled")) {
                        var j = parseInt(d.text(), 10) || 1,
                            i = a.viewDate.getFullYear(),
                            k = a.viewDate.getMonth();
                        d.hasClass("old") ? 0 === k ? (k = 11, i -= 1) : k -= 1 : d.hasClass("new") && (11 === k ? (k = 0, i += 1) : k += 1), a.setDate(new Date(i, k, j, 0, 0, 0, 0))
                    }
            }
        }, a.keydown = function(b) {
            switch (console.log, b.keyCode) {
                case 27:
                case 13:
                case 9:
                    a.hide(!0)
            }
        }, a.find = function(a, b) {
            var d;
            d = b ? b[0].querySelector(a) : c[0].querySelector(a);
            var e = angular.element(d);
            return e
        }, a.setStartDate = function(b) {
            b ? a.startDate = b : a.startDate = new Date(0, 0, 0)
        }, a.setEndDate = function(b) {
            b ? a.endDate = b : a.endDate = new Date(3e3, 0, 0)
        }, a.show = function(c) {
            a.ngModel || (a.ngModel = new Date), a.update(), a.place(), a.viewMode = 0, a.showPicker = !0, b.on("keydown", a.keydown), c && a.$apply()
        }, a.hide = function(c) {
            a.showPicker = !1, a.picker.off("mousedown"), b.unbind("keydown", a.keydown), c && a.$apply()
        }, a.displayPicker = function(b) {
            a.picker && (a.showPicker || (a.bindevent(a.picker), a.show()))
        }, a.bindevent = function(b) {
            function c(b) {
                b.preventDefault(), b.explicitOriginalTarget ? a.onclick(b.explicitOriginalTarget) : b.target ? a.onclick(b.target) : alert("Browser click event not supported [report a bug]")
            }
            b.on("mousedown", c)
        }, a.init = function() {
            if (a.dayoff = [], d.dayoff)
                for (var b = d.dayoff.split(","), f = 0; f < b.length; f++) a.dayoff.push(parseInt(b[f]));
            if (a.pickerid = d.id || "date-picker-" + parseInt(1e3 * Math.random()), a.language = d.language || a.locale || "en", a.autohide = d.autohide || !0, a.weekStart = d.weekstart || 1, a.calendarWeeks = d.weeknum || !1, a.todayButton = d.today || !1, a.todayHighlight = d.highlight || !0, a.placeholder = d.placeholder || "", a.format = d.format || a.datefmt || "dd-MM-yyyy", a.locales = e[a.language], a.setStartDate(a.notBefore), a.setEndDate(a.notAfter), d.today && "true" === a.todayButton.toLowerCase() && (a.todayButton = a.locales.today), d.iconify) {
                var g = c.find("input"),
                    h = c.find("label");
                g.addClass("date-input-hidden"), h.addClass("date-input-hidden"), c.addClass("bzm-iconified")
            }
            if (d.icon || d.iconify) {
                var i = c.find("span");
                i.addClass("icon-label-input fa fa-calendar fi-calendar")
            }
            if (d.label) {
                var h = c.find("label");
                h.html(d.label)
            }
            a.$watch("notBefore", function() {
                a.setStartDate(a.notBefore), a.update(), a.updateNavArrows()
            }), a.$watch("notAfter", function() {
                a.setEndDate(a.notAfter), a.update(), a.updateNavArrows()
            }), a.picker = a.find("div .datepicker")
        }, a.init()
    }
    var e = {
            en: {
                months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                today: "Today",
                placeholder: "Select Date"
            },
            fr: {
                months: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"],
                monthsShort: ["Jan", "Fev", "Mar", "Avr", "Mai", "Jun", "Jul", "Aoû", "Sep", "Oct", "Nov", "Dec"],
                today: "Aujourd'hui",
                placeholder: "Date Selection"
            },
            es: {
                months: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Deciembre"],
                monthsShort: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
                today: "Hoy"
            },
            de: {
                months: ["Januar", "Februar", "Marz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
                monthsShort: ["Jan", "Feb", "Mar", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
                today: "Heute"
            },
            nl: {
                months: ["Januari", "Februari", "Maart", "April", "Mei", "Juni", "Juli", "Augustus", "September", "Oktober", "November", "December"],
                monthsShort: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"],
                today: "Vandaag"
            }
        },
        f = {
            headTemplate: '<thead><tr><th class="prev"><i class="fa fa-chevron-left fi-arrow-left"/></th><th colspan="5" class="date-switch"></th><th class="next"><i class="fa fa-chevron-right fi-arrow-right"/></th></tr></thead>',
            contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
            footTemplate: '<tfoot ng-show="todayButton"><tr><th colspan="7" class="today">{{todayButton}}</th></tr></tfoot>',
            headTemplateDays: '<thead><tr><th class="prev"><i class="fa fa-chevron-left fi-arrow-left"/></th><th colspan="5" class="date-switch"></th><th class="next"><i class="fa fa-chevron-right fi-arrow-right"/></th></tr></thead>',
            footTemplateDays: '<tfoot class="picker {{todayClass}}" ng-show="todayButton"><tr><th colspan="7" class="today">{{todayButton}}</th></tr></tfoot>'
        },
        g = '<div class="bzm-date-picker"> <div ng-click="displayPicker()" class="date-display"><label for={{pickerid}} class="date-input-label"></label><input readonly id={{pickerid}} class="date-input" placeholder="{{placeholder}}" value="{{modelviewvalue}}"><span class="date-input-icon"></span><div ng-show="showPicker" class="datepicker datepicker-dropdown"><div ng-show="viewMode === 0" class="datepicker-days"><table class=" table-condensed">' + f.headTemplateDays + "<tbody></tbody>" + f.footTemplateDays + '</table></div><div ng-show="viewMode === 1" class="datepicker-months"><table class="table-condensed">' + f.headTemplate + f.contTemplate + f.footTemplate + '</table></div><div ng-show="viewMode === 2" class="datepicker-years"><table class="table-condensed">' + f.headTemplate + f.contTemplate + f.footTemplate + '</table></div><a class="button datepicker-close small alert right" style="width:auto;"><i class="fa fa-remove fa-times fi-x"></i></a></div>',
        h = {
            modes: [{
                clsName: "days",
                navFnc: "Month",
                navStep: 1
            }, {
                clsName: "months",
                navFnc: "FullYear",
                navStep: 1
            }, {
                clsName: "years",
                navFnc: "FullYear",
                navStep: 10
            }],
            isLeapYear: function(a) {
                return a % 4 === 0 && a % 100 !== 0 || a % 400 === 0
            },
            getDaysInMonth: function(a, b) {
                return [31, h.isLeapYear(a) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][b]
            },
            formatDate: function(a, b, d) {
                var e = c("date")(a, b, d);
                return e
            }
        };
    return {
        restrict: "E",
        scope: {
            datefmt: "=",
            locale: "=",
            ngModel: "=",
            notAfter: "=",
            notBefore: "=",
            callback: "="
        },
        template: g,
        require: "ngModel",
        replace: !0,
        link: d
    }
}
var DatePicker = angular.module("bzm-date-picker", []);
DatePicker.directive("datePicker", ["$log", "$document", "$filter", bzmDatePicker]);